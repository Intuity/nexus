# Copyright 2021, Peter Birch, mailto:peter@lightlogic.co.uk
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# ==============================================================================
# Output Variables
# ==============================================================================

SYN_FULL           ?= no
SYN_WORK_DIR       ?= work
SYN_SCRIPT_PATH    ?= $(SYN_WORK_DIR)/yosys.do
SYN_LOG_PATH       ?= $(SYN_WORK_DIR)/yosys.log
SYN_OUTPUT_NETLIST ?= $(abspath $(SYN_WORK_DIR))/$(DESIGN_TOP)_nl.v
SYN_OUTPUT_RPT     ?= $(abspath $(SYN_WORK_DIR))/$(DESIGN_TOP).rpt

MAKE_DIRS += $(SYN_WORK_DIR)

# ==============================================================================
# Generate Synthesis Script
# ==============================================================================

$(SYN_SCRIPT_PATH): | $(SYN_WORK_DIR)
	@echo "# Creating synthesis script $(notdir $@)"
ifneq ($(QUIET),yes)
	$(PRECMD)echo "echo on;" >> $@
endif
	$(PRECMD)echo "log --> Setting up include directories;" >> $@
	$(PRECMD)for d in $(abspath $(RTL_SRC_DIRS)); do \
	    echo "read -incdir $$d;" >> $@; \
	done
	$(PRECMD)echo "log --> Reading in RTL files;" >> $@
	$(PRECMD)for f in $(abspath $(RTL_SRCS)); do \
	    echo "read -sv $$f;" >> $@; \
	done
	$(PRECMD)echo "log --> Building hierarchy from $(DESIGN_TOP);" >> $@
	$(PRECMD)echo "hierarchy -top $(DESIGN_TOP);" >> $@
	$(PRECMD)echo "log --> Flattening the hierarchy;" >> $@
	$(PRECMD)echo "flatten;" >> $@
	$(PRECMD)echo "log --> Translate processes to netlist;" >> $@
	$(PRECMD)echo "proc;" >> $@
	$(PRECMD)echo "log --> Extract and optimise FSMs;" >> $@
	$(PRECMD)echo "fsm;" >> $@
	$(PRECMD)echo "log --> Perform simple optimisations (round 1);" >> $@
	$(PRECMD)echo "opt;" >> $@
	$(PRECMD)echo "log --> Translate memories to basic cells;" >> $@
	$(PRECMD)echo "memory;" >> $@
	$(PRECMD)echo "log --> Perform simple optimisations (round 2);" >> $@
	$(PRECMD)echo "opt;" >> $@
	$(PRECMD)echo "log --> Zero-initialising all flops;" >> $@
	$(PRECMD)echo "zinit;" >> $@
	$(PRECMD)echo "log --> Generic technology mapping;" >> $@
	$(PRECMD)echo "techmap;" >> $@
	$(PRECMD)echo "log --> Writing out simple Verilog netlist;" >> $@
	$(PRECMD)echo "write_verilog -noattr $(SYN_OUTPUT_NETLIST);" >> $@
	$(PRECMD)echo "log --> Reporting statistics;" >> $@
	$(PRECMD)echo "tee -o $(SYN_OUTPUT_RPT) stat -tech xilinx;" >> $@

# ==============================================================================
# Synthesis Step
# ==============================================================================

SYN_ARGS += -Q
SYN_ARGS += -l $(abspath $(SYN_LOG_PATH))
SYN_ARGS += -s $(abspath $(SYN_SCRIPT_PATH))

.PHONY: synth
synth: $(SYN_SCRIPT_PATH) | $(SYN_WORK_DIR)
	@echo "# Starting synthesis with script $(notdir $(SYN_SCRIPT_PATH))"
	$(PRECMD)cd $(SYN_WORK_DIR) && yosys $(SYN_ARGS)
