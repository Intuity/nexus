// Copyright 2021, Peter Birch, mailto:peter@lightlogic.co.uk
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "google/protobuf/empty.proto";

package NexusRPC;

service NXService {
    // Control interface
    rpc ControlGetIdentity (google.protobuf.Empty) returns (NXControlIdentity) {}
    rpc ControlSetReset (google.protobuf.Empty) returns (google.protobuf.Empty) {}
    rpc ControlGetParameters (google.protobuf.Empty) returns (NXControlParameters) {}
    rpc ControlGetStatus (google.protobuf.Empty) returns (NXControlStatus) {}
    rpc ControlGetCycles (google.protobuf.Empty) returns (NXControlCycles) {}
    rpc ControlSetInterval (NXControlInterval) returns (google.protobuf.Empty) {}
    rpc ControlSetActive (NXControlActive) returns (google.protobuf.Empty) {}

    // Mesh interface
    rpc MeshLoadInstruction (NXMeshLoadInstruction) returns (google.protobuf.Empty) {}
    rpc MeshMapOutput (NXMeshMapOutput) returns (google.protobuf.Empty) {}
    rpc MeshSetInput (NXMeshSignalState) returns (google.protobuf.Empty) {}
    rpc MeshGetOutputState (google.protobuf.Empty) returns (NXMeshOutputState) {}
}

message NXControlIdentity {
    uint32 device_id     = 1;
    uint32 version_major = 2;
    uint32 version_minor = 3;
}

message NXControlParameters {
    uint32 counter_width  = 1;
    uint32 rows           = 2;
    uint32 columns        = 3;
    uint32 node_inputs    = 4;
    uint32 node_outputs   = 5;
    uint32 node_registers = 6;
}

message NXControlStatus {
    bool active        = 1;
    bool seen_idle_low = 2;
    bool first_tick    = 3;
    bool interval_set  = 4;
}

message NXControlInterval {
    uint32 interval = 1;
}

message NXControlActive {
    bool active = 1;
}

message NXControlCycles {
    uint32 cycles = 1;
}

message NXMeshLoadInstruction {
    uint32 row     = 1;
    uint32 column  = 2;
    uint32 encoded = 3;
}

message NXMeshMapOutput {
    uint32 row               = 1;
    uint32 column            = 2;
    uint32 index             = 3;
    uint32 target_row        = 4;
    uint32 target_column     = 5;
    uint32 target_index      = 6;
    uint32 target_sequential = 7;
}

message NXMeshSignalState {
    uint32 row        = 1;
    uint32 column     = 2;
    uint32 index      = 3;
    uint32 value      = 4;
    uint32 sequential = 5;
}

message NXMeshOutputState {
    uint64 state = 1;
}
